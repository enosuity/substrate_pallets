
//! Autogenerated weights for `lottery`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `ant-anuj-kumar-atr056`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// lottery
// --extrinsic
// *
// --steps
// 50
// --repeat
// 10
// --output
// pallets/lottery/src/weights.rs
// --execution
// wasm
// --wasm-execution
// compiled

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;


/// Weight functions needed for pallet_lottery.
pub trait WeightInfo {
	fn buy_ticket() -> Weight;
	fn set_calls(n: u32, ) -> Weight;
	fn start_lottery() -> Weight;
	fn stop_lottery() -> Weight;
	fn on_initialize_end() -> Weight;
	fn on_initialize_repeat() -> Weight;
}

/// Weight functions for `lottery`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Lottery Lottery (r:1 w:0)
	// Storage: Lottery CallIndices (r:1 w:0)
	// Storage: Lottery TicketsCount (r:1 w:1)
	// Storage: Lottery Participants (r:1 w:1)
	// Storage: Lottery LotteryIndex (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Lottery Tickets (r:0 w:1)
	fn buy_ticket() -> Weight {
		// Minimum execution time: 136_823 nanoseconds.
		Weight::from_ref_time(144_392_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Lottery CallIndices (r:0 w:1)
	/// The range of component `n` is `[0, 10]`.
	fn set_calls(n: u32, ) -> Weight {
		// Minimum execution time: 25_400 nanoseconds.
		Weight::from_ref_time(33_288_970 as u64)
			// Standard Error: 145_636
			.saturating_add(Weight::from_ref_time(1_332_114 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Lottery Lottery (r:1 w:1)
	// Storage: Lottery LotteryIndex (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn start_lottery() -> Weight {
		// Minimum execution time: 91_925 nanoseconds.
		Weight::from_ref_time(97_071_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Lottery Lottery (r:1 w:1)
	fn stop_lottery() -> Weight {
		// Minimum execution time: 18_815 nanoseconds.
		Weight::from_ref_time(21_378_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Lottery DummyBalance (r:1 w:0)
	// Storage: Lottery Lottery (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Lottery TicketsCount (r:1 w:1)
	// Storage: Lottery Tickets (r:1 w:0)
	fn on_initialize_end() -> Weight {
		// Minimum execution time: 244_620 nanoseconds.
		Weight::from_ref_time(251_976_000 as u64)
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Lottery DummyBalance (r:1 w:0)
	// Storage: Lottery Lottery (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Lottery TicketsCount (r:1 w:1)
	// Storage: Lottery Tickets (r:1 w:0)
	// Storage: Lottery LotteryIndex (r:1 w:1)
	fn on_initialize_repeat() -> Weight {
		// Minimum execution time: 229_959 nanoseconds.
		Weight::from_ref_time(265_164_000 as u64)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
}
